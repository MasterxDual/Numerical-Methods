# ==============================
# ðŸ“˜ Comparison: Euler vs Exact Solution
# ==============================

import numpy as np
import matplotlib.pyplot as plt

# --- Read data from results.txt (generated by C code) ---
data1 = np.loadtxt('circuito_i1.txt')  # Each row: X[i]    Y[i]
data2 = np.loadtxt('circuito_i2.txt')  # Each row: X[i]    Y[i]

x_euler_1 = data1[:, 0]
y_euler_1 = data1[:, 1]
x_euler_2 = data2[:, 0]
y_euler_2 = data2[:, 1]

# --- Compute the exact analytical solution y(x) = (2/3) * x^(3/2) ---
x_exact = np.linspace(min(x_euler_1), max(x_euler_1), 200)  # 200 points for smooth curve
""" y_exact1 = x_exact**2 + np.sin(x_exact)
y_exact2 = np.cos(x_exact) - x_exact
y_exact3 = np.exp(-x_exact) + x_exact**3
y_exact4 = np.log(x_exact + 1) + x_exact**2 """

# --- Plot both curves ---
plt.figure(figsize=(8, 6))

# Euler method points
plt.plot(x_euler_1, y_euler_1, 'ro-', label="i1", markersize=5)
plt.plot(x_euler_2, y_euler_2, 'go-', label="i2", markersize=5)

# --- Graph formatting ---
plt.title("Results of i1(t) and i2(t)", fontsize=13)
plt.xlabel("t", fontsize=12)
plt.ylabel("i(t)", fontsize=12)
plt.legend()
plt.grid(True)

# Axis limits slightly extended
plt.xlim(min(x_euler_1) - 0.5, max(x_euler_1) + 0.5)
plt.ylim(min(y_euler_1) - 0.5, max(y_euler_1) + 0.5)

# Show plot
plt.show()

"""
https://matplotlib.org/stable/api/markers_api.html ---> Different types of points
https://matplotlib.org/stable/gallery/color/named_colors.html ----> Colors
https://matplotlib.org/stable/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D.set_linestyle --> Line styles
"""