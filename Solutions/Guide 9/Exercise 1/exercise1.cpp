#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MAX_SIZE 100

/**
 * Function to save computed values to a text file
 * @param x Array of x values
 * @param fp Array of first derivative values
 * @param n Number of subintervals
 */
void save_in_txt(double X[], double Y[], int n);

/**
 * Function to define function f(x, y)
 * @param x The independent variable
 * @param y The dependent variable
 * @return The value of the function at (x, y)
 */
double f(double x, double y);

/**
 * Function to define the exact solution y(x) for comparison
 * @param x The independent variable
 * @return The exact value of y at x
 */
double y(double x);

/**
 * Function to define the total derivative of f with respect to x
 * @param x The independent variable
 * @param y The dependent variable
 * @return The value of the total derivative at (x, y)
 */
double fprima(double x, double y);  // Nueva funci√≥n: derivada total de f respecto a x

/**
 * Function to define the third derivative of y with respect to x
 * @param x The independent variable
 * @param y The dependent variable
 * @return The value of the third derivative at (x, y)
 */
double y3prima(double x, double y);

/* 
Point 1:
    Data: 
    f(t, y) = pow(t, 2) - y
    y(t) = -exp(-t) + (t*t) - (2*t) + 2)
    t = [0, 3]
    y(0) = 1
    h = 0.2
    X[i]            Y[i]
    0.000000        1.000000
    0.200000        0.800000
    0.400000        0.648000
    0.600000        0.550400
    0.800000        0.512320
    1.000000        0.537856
    1.200000        0.630285
    1.400000        0.792228
    1.600000        1.025782
    1.800000        1.332626
    2.000000        1.714101
    2.200000        2.171281
    2.400000        2.705024
    2.600000        3.316020
    2.800000        4.004816
    3.000000        4.771853
    e0 = 0.000000
    e1 = 0.021269
    e2 = 0.041680
    e3 = 0.060788
    e4 = 0.078351
    e5 = 0.094265
    e6 = 0.108521
    e7 = 0.121175
    e8 = 0.132321
    e9 = 0.142075
    e10 = 0.150564
    e11 = 0.157916
    e12 = 0.164258
    e13 = 0.169707
    e14 = 0.174374
    e15 = 0.178360

    f(t, y) = pow(t, 2) - y
    y(t) = -exp(-t) + (t*t) - (2*t) + 2)
    t = [0, 3]
    y(0) = 1
    h = 0.1
    X[i]            Y[i]
    0.000000        1.000000    
    0.100000        0.900000
    0.200000        0.811000
    0.300000        0.733900
    0.400000        0.669510
    0.500000        0.618559
    0.600000        0.581703
    0.700000        0.559533
    0.800000        0.552580
    0.900000        0.561322
    1.000000        0.586189
    1.100000        0.627570
    1.200000        0.685813
    1.300000        0.761232
    1.400000        0.854109
    1.500000        0.964698
    1.600000        1.093228
    1.700000        1.239905
    1.800000        1.404915
    1.900000        1.588423
    2.000000        1.790581
    2.100000        2.011523
    2.200000        2.251371
    2.300000        2.510234
    2.400000        2.788210
    2.500000        3.085389
    2.600000        3.401850
    2.700000        3.737665
    2.800000        4.092899
    2.900000        4.467609
    3.000000        4.861848

    e(0): 0.000000
    e(1): 0.005163
    e(2): 0.010269
    e(3): 0.015282
    e(4): 0.020170
    e(5): 0.024910
    e(6): 0.029485
    e(7): 0.033882
    e(8): 0.038092
    e(9): 0.042109
    e(10): 0.045931
    e(11): 0.049558
    e(12): 0.052992
    e(13): 0.056236
    e(14): 0.059294
    e(15): 0.062172
    e(16): 0.064875
    e(17): 0.067411
    e(18): 0.069786
    e(19): 0.072008
    e(20): 0.074084
    e(21): 0.076021
    e(22): 0.077826
    e(23): 0.079508
    e(24): 0.081072
    e(25): 0.082526
    e(26): 0.083876
    e(27): 0.085129
    e(28): 0.086291
    e(29): 0.087368
    e(30): 0.088365

Point 2:
    Data: 
    f(t, y) = exp(-2*t) - (2*y)
    y(t) = ((1/10) + t) * exp(-2*t)
    t = [0, 10]
    y(0) = (1/10)
    h = 0.2
    i          X[i]            Exact Y         Euler Y         Exact Error     Local Trunc. Err
    -------------------------------------------------------------------------------------------
    0          0.000000        0.100000        0.100000        0.000000        -0.004000      
    1          0.200000        0.201096        0.260000        0.058904        -0.010189      
    2          0.400000        0.224664        0.290064        0.065400        -0.008987      
    3          0.600000        0.210836        0.263904        0.053068        -0.005542      
    4          0.800000        0.181707        0.218581        0.036874        -0.002100      
    5          1.000000        0.148869        0.171528        0.022659        0.000541       
    6          1.200000        0.117933        0.129984        0.012051        0.002250       
    7          1.400000        0.091215        0.096134        0.004919        0.003162       
    8          1.600000        0.069296        0.069842        0.000547        0.003489       
    9          1.800000        0.051915        0.050058        0.001857        0.003432       
    10         2.000000        0.038463        0.035499        0.002963        0.003150       
    11         2.200000        0.028238        0.024963        0.003275        0.002760       
    12         2.400000        0.020574        0.017433        0.003141        0.002337       
    13         2.600000        0.014895        0.012106        0.002789        0.001929       
    14         2.800000        0.010724        0.008367        0.002357        0.001559       
    15         3.000000        0.007684        0.005760        0.001924        0.001239       
    16         3.200000        0.005483        0.003952        0.001532        0.000972       
    17         3.400000        0.003898        0.002703        0.001195        0.000753       
    18         3.600000        0.002762        0.001845        0.000918        0.000578       
    19         3.800000        0.001952        0.001256        0.000696        0.000439       
    20         4.000000        0.001375        0.000854        0.000522        0.000331       
    21         4.200000        0.000967        0.000579        0.000388        0.000248       
    22         4.400000        0.000678        0.000393        0.000286        0.000185       
    23         4.600000        0.000475        0.000266        0.000209        0.000137       
    24         4.800000        0.000332        0.000180        0.000152        0.000101       
    25         5.000000        0.000232        0.000121        0.000110        0.000074       
    26         5.200000        0.000161        0.000082        0.000079        0.000054       
    27         5.400000        0.000112        0.000055        0.000057        0.000040       
    28         5.600000        0.000078        0.000037        0.000041        0.000029       
    29         5.800000        0.000054        0.000025        0.000029        0.000021       
    30         6.000000        0.000037        0.000017        0.000021        0.000015       
    31         6.200000        0.000026        0.000011        0.000015        0.000011       
    32         6.400000        0.000018        0.000008        0.000010        0.000008       
    33         6.600000        0.000012        0.000005        0.000007        0.000006       
    34         6.800000        0.000009        0.000003        0.000005        0.000004       
    35         7.000000        0.000006        0.000002        0.000004        0.000003       
    36         7.200000        0.000004        0.000002        0.000003        0.000002       
    37         7.400000        0.000003        0.000001        0.000002        0.000001       
    38         7.600000        0.000002        0.000001        0.000001        0.000001       
    39         7.800000        0.000001        0.000000        0.000001        0.000001       
    40         8.000000        0.000001        0.000000        0.000001        0.000001       
    41         8.200000        0.000001        0.000000        0.000000        0.000000       
    42         8.400000        0.000000        0.000000        0.000000        0.000000       
    43         8.600000        0.000000        0.000000        0.000000        0.000000       
    44         8.800000        0.000000        0.000000        0.000000        0.000000       
    45         9.000000        0.000000        0.000000        0.000000        0.000000       
    46         9.200000        0.000000        0.000000        0.000000        0.000000       
    47         9.400000        0.000000        0.000000        0.000000        0.000000       
    48         9.600000        0.000000        0.000000        0.000000        0.000000       
    49         9.800000        0.000000        0.000000        0.000000        0.000000       
    50         10.000000       0.000000        0.000000        0.000000        0.000000 

    f(t, y) = exp(-2*t) - (2*y)
    y(t) = (0.1 + t) * exp(-2*t)
    t = [0, 10]
    y(0) = (1/10)
    h = 0.1

    i          X[i]            Exact Y         Euler Y         Exact Error     Local Trunc. Err
    -------------------------------------------------------------------------------------------
    0          0.000000        0.100000        0.100000        0.000000        -0.001000      
    1          0.100000        0.163746        0.180000        0.016254        -0.002129      
    2          0.200000        0.201096        0.225873        0.024777        -0.002547      
    3          0.300000        0.219525        0.247730        0.028206        -0.002525      
    4          0.400000        0.224664        0.253066        0.028401        -0.002247      
    5          0.500000        0.220728        0.247385        0.026658        -0.001839      
    6          0.600000        0.210836        0.234696        0.023860        -0.001385      
    7          0.700000        0.197278        0.217876        0.020599        -0.000937      
    8          0.800000        0.181707        0.198961        0.017254        -0.000525      
    9          0.900000        0.165299        0.179358        0.014059        -0.000165      
    10         1.000000        0.148869        0.160017        0.011148        0.000135       
    11         1.100000        0.132964        0.141547        0.008583        0.000377       
    12         1.200000        0.117933        0.124318        0.006384        0.000562       
    13         1.300000        0.103983        0.108526        0.004543        0.000698       
    14         1.400000        0.091215        0.094248        0.003033        0.000791       
    15         1.500000        0.079659        0.081480        0.001820        0.000846       
    16         1.600000        0.069296        0.070162        0.000867        0.000872       
    17         1.700000        0.060072        0.060206        0.000134        0.000874       
    18         1.800000        0.051915        0.051502        0.000413        0.000858       
    19         1.900000        0.044742        0.043934        0.000807        0.000828       
    20         2.000000        0.038463        0.037384        0.001078        0.000788       
    21         2.100000        0.032990        0.031739        0.001251        0.000741       
    22         2.200000        0.028238        0.026891        0.001347        0.000690       
    23         2.300000        0.024124        0.022740        0.001384        0.000637       
    24         2.400000        0.020574        0.019197        0.001377        0.000584       
    25         2.500000        0.017519        0.016181        0.001338        0.000532       
    26         2.600000        0.014895        0.013619        0.001276        0.000482       
    27         2.700000        0.012646        0.011447        0.001200        0.000434       
    28         2.800000        0.010724        0.009609        0.001115        0.000390       
    29         2.900000        0.009083        0.008057        0.001026        0.000348       
    30         3.000000        0.007684        0.006748        0.000936        0.000310       
    31         3.100000        0.006494        0.005646        0.000848        0.000275       
    32         3.200000        0.005483        0.004720        0.000763        0.000243       
    33         3.300000        0.004625        0.003942        0.000683        0.000214       
    34         3.400000        0.003898        0.003290        0.000608        0.000188       
    35         3.500000        0.003283        0.002743        0.000540        0.000165       
    36         3.600000        0.002762        0.002286        0.000477        0.000144       
    37         3.700000        0.002323        0.001903        0.000419        0.000126       
    38         3.800000        0.001952        0.001584        0.000368        0.000110       
    39         3.900000        0.001639        0.001317        0.000322        0.000095       
    40         4.000000        0.001375        0.001095        0.000281        0.000083       
    41         4.100000        0.001154        0.000909        0.000244        0.000072       
    42         4.200000        0.000967        0.000755        0.000212        0.000062       
    43         4.300000        0.000810        0.000626        0.000184        0.000054       
    44         4.400000        0.000678        0.000520        0.000159        0.000046       
    45         4.500000        0.000568        0.000431        0.000137        0.000040       
    46         4.600000        0.000475        0.000357        0.000118        0.000034       
    47         4.700000        0.000397        0.000296        0.000101        0.000029       
    48         4.800000        0.000332        0.000245        0.000087        0.000025       
    49         4.900000        0.000277        0.000203        0.000075        0.000022       
    50         5.000000        0.000232        0.000168        0.000064        0.000019       
    51         5.100000        0.000193        0.000139        0.000055        0.000016       
    52         5.200000        0.000161        0.000115        0.000047        0.000014       
    53         5.300000        0.000135        0.000095        0.000040        0.000012       
    54         5.400000        0.000112        0.000078        0.000034        0.000010       
    55         5.500000        0.000094        0.000065        0.000029        0.000008       
    56         5.600000        0.000078        0.000053        0.000025        0.000007       
    57         5.700000        0.000065        0.000044        0.000021        0.000006       
    58         5.800000        0.000054        0.000036        0.000018        0.000005       
    59         5.900000        0.000045        0.000030        0.000015        0.000004       
    60         6.000000        0.000037        0.000025        0.000013        0.000004       
    61         6.100000        0.000031        0.000020        0.000011        0.000003       
    62         6.200000        0.000026        0.000017        0.000009        0.000003       
    63         6.300000        0.000022        0.000014        0.000008        0.000002       
    64         6.400000        0.000018        0.000011        0.000006        0.000002       
    65         6.500000        0.000015        0.000009        0.000005        0.000002       
    66         6.600000        0.000012        0.000008        0.000005        0.000001       
    67         6.700000        0.000010        0.000006        0.000004        0.000001       
    68         6.800000        0.000009        0.000005        0.000003        0.000001       
    69         6.900000        0.000007        0.000004        0.000003        0.000001       
    70         7.000000        0.000006        0.000004        0.000002        0.000001       
    71         7.100000        0.000005        0.000003        0.000002        0.000001       
    72         7.200000        0.000004        0.000002        0.000002        0.000001       
    73         7.300000        0.000003        0.000002        0.000001        0.000000       
    74         7.400000        0.000003        0.000002        0.000001        0.000000       
    75         7.500000        0.000002        0.000001        0.000001        0.000000       
    76         7.600000        0.000002        0.000001        0.000001        0.000000       
    77         7.700000        0.000002        0.000001        0.000001        0.000000       
    78         7.800000        0.000001        0.000001        0.000001        0.000000       
    79         7.900000        0.000001        0.000001        0.000000        0.000000       
    80         8.000000        0.000001        0.000001        0.000000        0.000000       
    81         8.100000        0.000001        0.000000        0.000000        0.000000       
    82         8.200000        0.000001        0.000000        0.000000        0.000000       
    83         8.300000        0.000001        0.000000        0.000000        0.000000       
    84         8.400000        0.000000        0.000000        0.000000        0.000000       
    85         8.500000        0.000000        0.000000        0.000000        0.000000       
    86         8.600000        0.000000        0.000000        0.000000        0.000000       
    87         8.700000        0.000000        0.000000        0.000000        0.000000       
    88         8.800000        0.000000        0.000000        0.000000        0.000000       
    89         8.900000        0.000000        0.000000        0.000000        0.000000       
    90         9.000000        0.000000        0.000000        0.000000        0.000000       
    91         9.100000        0.000000        0.000000        0.000000        0.000000       
    92         9.200000        0.000000        0.000000        0.000000        0.000000       
    93         9.300000        0.000000        0.000000        0.000000        0.000000       
    94         9.400000        0.000000        0.000000        0.000000        0.000000       
    95         9.500000        0.000000        0.000000        0.000000        0.000000       
    96         9.600000        0.000000        0.000000        0.000000        0.000000       
    97         9.700000        0.000000        0.000000        0.000000        0.000000       
    98         9.800000        0.000000        0.000000        0.000000        0.000000       
    99         9.900000        0.000000        0.000000        0.000000        0.000000       
    100        10.000000       0.000000        0.000000        0.000000        0.000000
*/

int main(int argc, char const *argv[]) {
    // General variables
    double X0, Xf, Y0, h;
    // Variables for the Neumann method
    double Xp, Yp;
    int n;
    double X[MAX_SIZE + 1], Y[MAX_SIZE + 1];
    // Error to calculate
    double exact_error, local_trunc_error;

    printf("Insert X0 and Xf:\n");
    scanf("%lf %lf", &X0, &Xf);
    printf("Insert initial data Y0 = Y(X0):\n");
    scanf("%lf", &Y0);

    printf("Do you want to insert number of subintervals (n) or step size (h)?\n");
    printf("1. I want to insert n\n");
    printf("2. I want to insert h\n");
    int choice;
    scanf("%d", &choice);
    if(choice == 1) {
        printf("Insert number of subintervals n (integer):\n");
        scanf("%d", &n);
        // Calculate distance between points
        h = (Xf - X0) / n;
    } else if(choice == 2) {
        printf("Insert step size h:\n");
        scanf("%lf", &h);
        n = (int)((Xf - X0) / h);
    }

    
    // Calculate solution
    X[0] = X0;
    Y[0] = Y0;

    printf("Insert the method to use: 1. Euler's method 2. Neum Method 3. Midpoint method\n");
    scanf("%d", &choice);

    switch(choice) {
        case 1:
            for(int i = 1; i <= n; i++) {
                // Compute next X incrementally to avoid rounding surprises
                X[i] = X[i-1] + h; // X[i] = X0 + i*h; equivalently
                // Euler method
                Y[i] = Y[i-1] + h * f(X[i-1], Y[i-1]); 
            }
            for(int i = 0; i <= n; i++) {
                exact_error = fabs(y(X[i]) - Y[i]);
                printf("e[%d]: %lf\n", i, exact_error);
            }
        
            printf("\n%-10s %-15s %-15s %-15s %-15s %-15s\n", 
                   "i", "X[i]", "Exact Y", "Euler Y", "Exact Error", "Local Trunc. Err");
            printf("-------------------------------------------------------------------------------------------\n");
        
            // Euler's method approximates the curve by means of straight line segments tangent to each point.
            // If these segments lie above the curve ‚Üí Euler overestimates.
            // If they lie below it ‚Üí Euler underestimates.
            // If local_trunc_error < 0 => The value calculated by Euler is less than the exact one. Euler underestimates.
            // If local_trunc_error > 0 => The value calculated by Euler is greater than the exact one. Euler overestimates.
            for(int i = 0; i <= n; i++) {
                exact_error = fabs(y(X[i]) - Y[i]);
                local_trunc_error = (h * h / 2.0) * fprima(X[i], y(X[i])); 
                printf("%-10d %-15lf %-15lf %-15lf %-15lf %-15lf\n", 
                       i, X[i], y(X[i]), Y[i], exact_error, local_trunc_error);
            }
            break;
        case 2: 
            for(int i = 1; i <= n; i++) {
                X[i] = X0 + (i*h);
                // Neum method
                Xp = X[i] + h;
                Yp = Y[i-1] + h * f(X[i-1], Y[i-1]);
                Y[i] = Y[i-1] + (h/2.0) * (f(X[i-1], Y[i-1]) + f(Xp, Yp));
            }
            printf("\n%-10s %-15s %-15s %-15s %-15s %-15s\n", 
                    "i", "X[i]", "Exact Y", "Heun Y", "Exact Error", "Local Trunc. Err");
            printf("-------------------------------------------------------------------------------------------\n");

            for(int i = 0; i <= n; i++) {
                exact_error = fabs(y(X[i]) - Y[i]);
                local_trunc_error = (pow(h, 3) / 12.0) * y3prima(X[i], y(X[i]));
                printf("%-10d %-15lf %-15lf %-15lf %-15lf %-15lf\n", 
                       i, X[i], y(X[i]), Y[i], exact_error, local_trunc_error);
            }

            break;
        case 3:
            // Midpoint method that gave us the teacher in class
            /* for(int i = 1; i <= n; i++) {
                X[i] = X0 + (i*h/2.0);
                Xp = X[i] + h;
                Yp = Y[i-1] + ((h/2.0) * f(X[i-1], Y[i-1]));
                Y[i] = Y[i-1] + (h * f(Xp, Yp));
            } */

            // Midpoint method that gave me ChatGPT
            for(int i = 1; i <= n; i++) {
                X[i] = X0 + (i * h);
                // Slope (pendiente) at the start of the subinterval
                double k1 = f(X[i-1], Y[i-1]);
                // Slope at midpoint using Euler predictor
                double k2 = f(X[i-1] + h/2.0, Y[i-1] + (h/2.0) * k1);
                // Use the slope at the midpoint to move forward
                Y[i] = Y[i-1] + h * k2;
            }
        
            printf("\n%-10s %-15s %-15s %-15s %-15s %-15s\n", 
                   "i", "X[i]", "Exact Y", "Midpoint Y", "Exact Error", "Local Trunc. Err");
            printf("-------------------------------------------------------------------------------------------\n");
            
            for(int i = 0; i <= n; i++) {
                exact_error = fabs(y(X[i]) - Y[i]);
                local_trunc_error = (pow(h, 3) / 24.0) * y3prima(X[i], y(X[i]));
                printf("%-10d %-15lf %-15lf %-15lf %-15lf %-15lf\n", 
                       i, X[i], y(X[i]), Y[i], exact_error, local_trunc_error);
            }
            break;
    }

    
    // Print results
    printf("X[i]\t\tY[i]\n");
    // Print all computed points including the last one
    for(int i = 0; i <= n; i++) {
        printf("%lf\t%lf\n", X[i], Y[i]);
    }

    // Save x[i] and Y[i] in results.txt
    save_in_txt(X, Y, n);
    
    // Finally, we print the results.txt file in a graph using Python to visualize the results
    system("python3 graph_points.py");

    
    return 0;
}

// f(t, y)
double f(double x, double y) {
    // return (pow(x, 2) - y);
    return (exp(-2*x) - (2*y));
}

// y(t)
double y(double x) {
    // return (-exp(-x) + (x*x) - (2*x) + 2);
    return (0.1 + x) * exp(-2*x);
}

double y3prima(double x, double y) {
    // return 4 * x * y * (3 - 2 * x * x);
    return (11.2 - 8*x) * exp(-2*x);
}

double fprima(double x, double y) {
    double fx = -2 * y;
    double fy = -2 * x;
    return fx + fy * f(x, y);
}

void save_in_txt(double X[], double Y[], int n) {
    FILE *archivo = fopen("results.txt", "w");
    if (archivo == NULL) {
        printf("Error: Unable to create file.\n");
        exit(1);
    }

    for (int i = 0; i <= n; i++) {
        fprintf(archivo, "%lf\t%lf\n", X[i], Y[i]);
    }

    fclose(archivo);
}

